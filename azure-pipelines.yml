
variables:
  websiteManifestName: 'websitemanifest'
  kubeconfigArtifactName: 'kubeconfig'

stages:

  - stage: Build
    displayName: Build stage
    
    jobs:
    - job: PublishBuildArtifacts
      pool:      
        vmImage: 'Ubuntu-16.04'
      steps:
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: $(websiteManifestName)
          targetPath: 'devops/website'
      
  - stage: ProvisionEnvironment
    displayName: Provision Env with Terraform
    dependsOn: Build
    variables:
      - group: 'Terraform'
  
    jobs:
    - job: TransformConfiguration
      pool:      
        vmImage: 'Ubuntu-16.04'
      steps:
      - task: qetza.replacetokens.replacetokens-task.replacetokens@3
        displayName: 'Replace tokens in **/*.tfvars'
        inputs:
          rootDirectory: ./env         
          targetFiles: '**/*.tfvars'


      - script: |
          terraform init \
            -backend-config="resource_group_name=$(tf-backend-resource-group)" \
            -backend-config="storage_account_name=$(tf-backend-storage-account)" \
            -backend-config="container_name=$(tf-backend-container-name)" \
            -backend-config="key=$(tf-backend-state-file-name)" \
            -backend-config="access_key=$(tf-backend-state-file-key)"
    
        workingDirectory: ./env
        displayName: 'Terraform init'
  
      - script: terraform apply -auto-approve -var-file="terraform.tfvars"
      
        workingDirectory: ./env
        displayName: 'Terraform apply'

      - script: |
          echo "$(terraform output kube_config)\"" >> .kubeconfig
          kubectl get nodes --kubeconfig .kubeconfig
        
        workingDirectory: ./env
        displayName: 'kubectl check nodes'

      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: $(kubeconfigArtifactName)
          targetPath: 'env/.kubeconfig'

  - stage: DeployToDev
    displayName: Deploy to Dev
    dependsOn: ProvisionEnvironment
    variables:
      theme: 'default'
    jobs:
    - job: TransformConfiguration
      pool:      
        vmImage: 'Ubuntu-16.04'
      steps:
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: '$(websiteManifestName)'
          downloadPath: '$(System.ArtifactsDirectory)/$(websiteManifestName)'

      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: '$(kubeconfigArtifactName)'
          downloadPath: '$(System.ArtifactsDirectory)/$(kubeconfigArtifactName)'

      - task: replacetokens@3
        inputs:
          targetFiles: '$(System.ArtifactsDirectory)/$(websiteManifestName)/*'

      - script: |
          kubectl apply -f $(System.ArtifactsDirectory)/$(websiteManifestName)/deployment-website.yaml -n uat --kubeconfig $(System.ArtifactsDirectory)/$(kubeconfigArtifactName)/.kubeconfig

        workingDirectory: ./env
        displayName: 'Deploy Website'

  - stage: DeployToUAT
    displayName: Deploy to UAT
    dependsOn: DeployToDev
    variables:
      theme: 'red'
    jobs:
    - job: TransformConfiguration
      pool:      
        vmImage: 'Ubuntu-16.04'
      steps:
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: '$(websiteManifestName)'
          downloadPath: '$(System.ArtifactsDirectory)/$(websiteManifestName)'

      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: '$(kubeconfigArtifactName)'
          downloadPath: '$(System.ArtifactsDirectory)/$(kubeconfigArtifactName)'

      - task: replacetokens@3
        inputs:
          targetFiles: '$(System.ArtifactsDirectory)/$(websiteManifestName)/*'

      - script: |
          kubectl apply -f $(System.ArtifactsDirectory)/$(websiteManifestName)/deployment-website.yaml -n uat --kubeconfig $(System.ArtifactsDirectory)/$(kubeconfigArtifactName)/.kubeconfig

        workingDirectory: ./env
        displayName: 'Deploy Website'


  